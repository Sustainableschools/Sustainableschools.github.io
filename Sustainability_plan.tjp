/*
 * This file contains a project skeleton. It is part of the
 * taskJuggler project management tool. You can use this as a basis to
 * start you own project file.
 */
project your_project_id "Sustainable Schools"  2020-02-01 - 2021-12-28 {
  # Set the default time zone for the project. If not specified, UTC
  # is used.
  # timezone "UK/London"
  # Hide the clock time. Only show the date.
  timeformat "%Y-%m-%d"
  # Use US format for numbers
  numberformat "-" "" "," "." 1
  # Use US financial format for currency values. Don't show cents.
  currencyformat "(" ")" "," "." 0
  # Pick a day during the project that will be reported as 'today' in
  # the project reports. If not specified, the current day will be
  # used, but this will likely be outside of the project range, so it
  # can't be seen in the reports.
  now 2020-02-26
  # The currency for all money values is the Euro.
  currency "Euro"

  # You can define multiple scenarios here if you need them.
  scenario plan "Plan" {
  scenario actual "Actual"
  }

  dailyworkinghours 8
  weekstartsmonday
  workinghours mon - fri 08:00 - 21:00
  workinghours sat - sun 09:00 - 16:00


  # You can define your own attributes for tasks and resources. This
  # is handy to capture additonal information about the project that
  # is not directly impacting the project schedule but you like to
  # keep in one place.
  #extend task {
  #  reference spec "Link to Wiki page"
  #}
  #extend resource {
  #  text Phone "Phone"
  #}
}

copyright " "

# If you have any text block that you need multiple times to describe
# your project, you should define a macro for it. Macros can even have
# variable segments that you can set upon calling the macro.
#
 macro Task [
   task "${1}" { allocate r1 effort 10d
   }
 ]
#
# Can be called as
# ${task "big"}
# to generate
# task "A big task" {
# }

# You can attach flags to accounts, resources and tasks. These can be
# used to filter out subsets of them during reporting.
flags important, hidden

# If you want to do budget planning for you project, you need to
# define some accounts.
account cost "Project Cost" {
  account dev "Development"
  account doc "Documentation"
}
account rev "Customer Payments"

# The Profit&Loss analysis should be rev - cost accounts.
balance cost rev

# Define you public holidays here.




# The daily default rate of all resources. This can be overridden for each
# resource. We specify this, so that we can do a good calculation of
# the costs of the project.
rate 400.0

# This is a set of example resources.

resource Tom "Tom" {
  efficiency 0.5
}

resource Richard "Richard" {
  efficiency 0.2
}
resource David "David" {
  efficiency 0.2
}

resource Contract "Contract" {
  efficiency 1.0
}
task Sustainable_Schools "Sustainable_Schools" {

task  Energy " Energy Analysis " {

task  Archway " Archway " {
task Obtain_figures " Obtain Supply Figures " {start 2020-02-28 duration 20d complete 100 }
task Analyse " Analyse " {start 2020-02-01 duration 10d  }
task submonitor "Sub monitor " {start 2020-02-01 duration 20d  }
}
task  Rednock "Rednock" {
task Obtainfigures "Obtain Supply Figures" {start 2020-02-01 duration 10d }
task Analyse "Analyse" {
                             depends !Obtainfigures
                             effort 10d
                             allocate Richard
                        }
task submonitor "Sub monitor " {start 2020-02-01 duration 20d }
}
task  Thomas_Keble " Thomas Keble " {
task Obtain_figures " Obtain Supply Figures " {start 2020-02-28 duration 30d  }
task Analyse " Analyse " {start 2020-02-01 duration 10d  }
task submonitor "Sub monitor " {start 2020-02-01 duration 20d  }
}

}

task  Education " Education aspects " {
task  Archway " Archway " {length 1w}
task  Rednock " Rednock " {}
task  Thomas_Keble " Thomas Keble " {}

}

task  Transport " Transport aspects " {
task  Archway " Archway " {}
task  Rednock " Rednock " {
task EV_Demo "EV Demo" {
   task Planning "Planning" {duration 30d}
   task Demo_Day "Demo Day" { start 2020-6-30 duration 1d}
 }
}
task  Thomas_Keble " Thomas Keble " {}

}

task  Recycling "Recycling" {
   task  Archway " Archway " {}
   task  Rednock " Rednock " {}
   task  Thomas_Keble " Thomas Keble " {}

}

task General "General Initiatives" {
  task  Archway " Archway " {

  }

  task  Rednock " Rednock " {
    task  Tree_planting " Tree Planting " {start 2020-02-01 duration 10d complete 100 }
  }

  task  Thomas_Keble " Thomas Keble " {

  }
}
task Funding "Funding, Publicity, links" {
  task  Archway " Archway " {

  }

  task  Rednock " Rednock " {
  }

  task  Thomas_Keble " Thomas Keble " {

  }
}

}
# Now the project has been specified completely. Stopping here would
# result in a valid taskJuggler file that could be processed and
# scheduled. But no reports would be generated to visualize the
# results.

navigator navbar {
  hidereport 0
}

macro taskTip [
  tooltip istask() -8<-
    '''Start: ''' <-query attribute='start'->
    '''End: ''' <-query attribute='end'->
    ----
    '''Resources:'''

    <-query attribute='resources'->
    ----
    '''Precursors: '''

    <-query attribute='precursors'->
    ----
    '''Followers: '''

    <-query attribute='followers'->
    ->8-
]

textreport frame "" {
  header -8<-
    == Sustainable Schools Project Plan ==
    <[navigator id="navbar"]>
  ->8-
  footer "----"
  textreport index "Overview" {
    formats html
    center '<[report id="overview"]>'
  }

  textreport "Status" {
    formats html
    center -8<-
      <[report id="status.dashboard"]>
      ----
      <[report id="status.completed"]>
      ----
      <[report id="status.ongoing"]>
      ----
      <[report id="status.future"]>
    ->8-
  }

  textreport wps "Work packages" {
    textreport Plan "Complete_Plan" {
      formats html
      center '<[report id="Plan"]>'
    }

    textreport Energy "Energy Analysis" {
      formats html
      center '<[report id="Energy"]>'
    }

    textreport Education "Education Aspects" {
      formats html
      center '<[report id="Education"]>'
    }

    textreport Transport "Transport Aspects" {
      formats html
      center '<[report id="Transport"]>'
    }

  textreport Recycling "Recycling" {
    formats html
    center '<[report id="Recycling"]>'
   }

   textreport General "General" {
     formats html
     center '<[report id="General"]>'
    }

    textreport Funding "Funding&Publicity" {
      formats html
      center '<[report id="Funding"]>'
     }
}

  textreport "ResourceGraph" {
    formats html
    title "Resource Graph"
    center '<[report id="resourceGraph"]>'
  }
}

# A traditional Gantt chart with a project overview.
taskreport overview "" {
  header -8<-
    === Project Overview ===

    The project is structured into a number of areas of work.

    # <-reportlink id='frame.wps.Plan'->
    # <-reportlink id='frame.wps.Energy'->
    # <-reportlink id='frame.wps.Education'->
    # <-reportlink id='frame.wps.Recycling'->
    # <-reportlink id='frame.wps.General'->
    # <-reportlink id='frame.wps.Funding'->


    === Project Plan ===
  ->8-
  columns bsi { title 'WBS' },
          name, start, end, effort, chart { ${taskTip} width 4000 }
  # For this report we like to have the abbreviated weekday in front
  # of the date. %a is the tag for this.
  timeformat "%a %Y-%m-%d"
  loadunit days
  hideresource 1
  hidetask (treelevel() > 3)  #DJM
  balance cost rev
  caption 'All effort values are in days.'

  footer -8<-
    === Notes ===

    None.


  ->8-
}

# Macro to set the background color of a cell according to the alert
# level of the task.
macro AlertColor [
  cellcolor plan.alert = 0 "#00D000" # green
  cellcolor plan.alert = 1 "#D0D000" # yellow
  cellcolor plan.alert = 2 "#D00000" # red
]

taskreport status "" {
  columns bsi { width 50 title 'WBS' }, name { width 150 },
          start { width 100 }, end { width 100 },
          effort { width 100 },
          alert { tooltip plan.journal
                          != '' "<-query attribute='journal'->" width 150 },
          status { width 150 }

  taskreport dashboard "" {
    headline "Project Dashboard (<-query attribute='now'->)"
    columns name { title "task" ${AlertColor} width 200},
            resources { width 200 ${AlertColor}
                        listtype bullets
                        listitem "<-query attribute='name'->"
                        start ${projectstart} end ${projectend} },
            alerttrend { title "Trend" ${AlertColor} width 50 },
            journal { width 350 ${AlertColor} }
    journalmode status_up
    journalattributes headline, author, date, summary, details
    hidetask ~hasalert(0)
    sorttasks alert.down, plan.end.up
    period %{${now} - 1w} +1w
  }
  taskreport completed "" {
    headline "Already completed tasks"
    hidetask ~(plan.end <= ${now})
  }
  taskreport ongoing "" {
    headline "Ongoing tasks"
    hidetask ~((plan.start <= ${now}) & (plan.end > ${now}))
  }
  taskreport future "" {
    headline "Future tasks"
    hidetask ~(plan.start > ${now})
  }
}

# A list of tasks showing the resources assigned to each task.
taskreport Plan "" {
  headline "Overview - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${taskTip} scale week width 4000 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot Sustainable_Schools
}
# A list of tasks showing the resources assigned to each task.
taskreport Energy "" {
  headline "Energy - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${taskTip} scale week width 4000 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot Sustainable_Schools.Energy
}
# A list of tasks showing the resources assigned to each task.
taskreport Education "" {
  headline "Education - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${taskTip} scale week width 4000 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot Sustainable_Schools.Education
}
taskreport Recycling "" {
  headline "Recycling - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${taskTip} scale week width 4000 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot Sustainable_Schools.Recycling
}
taskreport Transport "" {
  headline "Transport - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${taskTip} scale week width 4000 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot Sustainable_Schools.Transport
}
taskreport General "" {
  headline "General - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${taskTip} scale week width 4000 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot Sustainable_Schools.General
}

taskreport Funding "" {
  headline "Funding,publicity,linkages - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${taskTip} scale week width 4000 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot Sustainable_Schools.Funding
}

# A list of all employees with their contact details.
resourcereport contactList "" {
  headline "Contact list and duty plan"
  columns name,
          email { celltext 1 "[mailto:<-email-> <-email->]" },
          managers { title "Manager" },
          chart { scale day }
  hideresource ~isleaf()
  sortresources name.up
  hidetask 1
}

# A graph showing resource allocation. It identifies whether each
# resource is under- or over-allocated for.
resourcereport resourceGraph "" {
  headline "Resource Allocation Graph"
  columns no, name, effort, rate, weekly { ${taskTip} }
  loadunit shortauto
  # We only like to show leaf tasks for leaf resources.
  hidetask ~(isleaf() & isleaf_())
  sorttasks plan.start.up
}
